(module libtoxcore-racket/functions
  racket/base
; libtoxcore-racket/functions.rkt
; FFI implementation of libtoxcore
(require ffi/unsafe
         ffi/unsafe/define)
(provide (except-out (all-defined-out)
                     define-tox))

(define-ffi-definer define-tox (ffi-lib "libtoxcore"))

; This version of the wrapper is synced with version 0.0.0 of toxcore

#|###################
 # type definitions #
 ################## |#

; The _string type supports conversion between Racket strings
; and char* strings using a parameter-determined conversion.
; instead of using _bytes, which is unnatural, use _string
; of specified type _string*/utf-8.
(default-_string-type _string*/utf-8)

; define Tox struct
(define _Tox-pointer (_cpointer 'Tox))

; the size of a Tox public key in bytes
(define TOX_PUBLIC_KEY_SIZE 32)
; the size of a Tox secret key in bytes
(define TOX_SECRET_KEY_SIZE 32)
; the size of a Tox address in bytes
(define TOX_ADDRESS_SIZE (+ TOX_PUBLIC_KEY_SIZE
                            (ctype-sizeof _uint32) (ctype-sizeof _uint16)))
; maximum length of a nickname in bytes
(define TOX_MAX_NAME_LENGTH 128)
; maximum length of a status message in bytes
(define TOX_MAX_STATUS_MESSAGE_LENGTH 1007)
; maximum length of a friend request message in bytes
(define TOX_MAX_FRIEND_REQUEST_LENGTH 1016)
; maximum length of single messages after which they should be split.
(define TOX_MAX_MESSAGE_LENGTH 1372)
; maximum size of custom packets
(define TOX_MAX_CUSTOM_PACKET_SIZE 1373)
; the number of bytes in a hash generated by tox-hash
(define TOX_HASH_LENGTH 32)
; the number of bytes in a file id
(define TOX_FILE_ID_LENGTH 32)
; maximum file name length for file transfer
(define TOX_MAX_FILENAME_LENGTH 255)

(define-cstruct _Tox-Options
  ([ipv6? _bool]
   [udp? _bool]
   [proxy-type _uint8]
   [proxy-host _string]
   [proxy-port _uint16]
   [start-port _uint16]
   [end-port _uint16]))

#|#######################
 # function definitions #
 ###################### |#

#|
 # Return the major version number of the library. Can be used to display the
 # Tox library version or to check whether the client is compatible with the
 # dynamically linked version of Tox.
 #
 # uint32_t tox_version_major(void);
 |#
(define-tox tox-version-major (_fun -> _uint32)
  #:c-id tox_version_major)

#|
 # Return the minor version number of the library.
 #
 # uint32_t tox_version_minor(void);
 |#
(define-tox tox-version-minor (_fun -> _uint32)
  #:c-id tox_version_minor)

#|
 # Return the patch number of the library.
 #
 # uint32_t tox_version_patch(void);
 |#
(define-tox tox-version-patch (_fun -> _uint32)
  #:c-id tox_version_patch)

#|
 # Return whether the compiled library version is compatible with the passed
 # version numbers.
 #
 # bool tox_version_is_compatible(uint32_t major, uint32_t minor, uint32_t patch);
 |#
(define-tox tox-version-compatible?
  (_fun [major : _uint32]
        [minor : _uint32]
        [patch : _uint32] -> _bool)
  #:c-id tox_version_is_compatible)

#|
 # A convenience macro to call tox_version_is_compatible with the currently
 # compiling API version.
 #
 # #define TOX_VERSION_IS_ABI_COMPATIBLE() \
 #   tox_version_is_compatible(TOX_VERSION_MAJOR, TOX_VERSION_MINOR, TOX_VERSION_PATCH)
 |#
(define-syntax tox-version-abi-compatible?
  (syntax-rules ()
    ((_)
     (tox-version-compatible? (tox-version-major)
                              (tox-version-minor)
                              (tox-version-patch)))))

#|
 # Initialises a Tox_Options object with the default options.
 #
 # The result of this function is independent of the original options. All
 # values will be overwritten, no values will be read (so it is permissible
 # to pass an uninitialised object).
 #
 # If options is NULL, this function has no effect.
 #
 # @param options An options object to be filled with default options.
 #
 # void tox_options_default(struct Tox_Options *options);
 |#
(define-tox tox-options-default (_fun [options : _Tox-Options-pointer] -> _void)
  #:c-id tox_options_default)

#|
 # Allocates a new Tox_Options object and initialises it with the default
 # options. This function can be used to preserve long term ABI compatibility by
 # giving the responsibility of allocation and deallocation to the Tox library.
 #
 # Objects returned from this function must be freed using the tox_options_free
 # function.
 #
 # @return A new Tox_Options object with default options or NULL on failure.
 #
 # struct Tox_Options *tox_options_new(TOX_ERR_OPTIONS_NEW *error);
 |#
(define-tox tox-options-new (_fun [err : (_list io _int 1)] -> _Tox-Options-pointer)
  #:c-id tox_options_new)

#|
 # Releases all resources associated with an options objects.
 #
 # Passing a pointer that was not returned by tox_options_new results in
 # undefined behaviour.
 #
 # void tox_options_free(struct Tox_Options *options);
 |#
(define-tox tox-options-free (_fun [options : _Tox-Options-pointer] -> _void)
  #:c-id tox_options_free)

#|
 # @brief Creates and initialises a new Tox instance with the options passed.
 #
 # This function will bring the instance into a valid state. Running the event
 # loop with a new instance will operate correctly.
 #
 # If the data parameter is not NULL, this function will load the Tox instance
 # from a byte array previously filled by tox_get_savedata.
 #
 # If loading failed or succeeded only partially, the new or partially loaded
 # instance is returned and an error code is set.
 #
 # @param options An options object as described above. If this parameter is
 # NULL, the default options are used.
 # @param data A byte array containing data previously stored by tox_get_savedata.
 # @param length The length of the byte array data. If this parameter is 0, the
 # data parameter is ignored.
 #
 # @see tox_iteration for the event loop.
 #
 # Tox *tox_new(const struct Tox_Options *options, const uint8_t *data, size_t length,
 #              TOX_ERR_NEW *error);
 |#
(define-tox tox-new
  (_fun [options : _Tox-Options-pointer]
        [data : _bytes]
        [len : _size = (bytes-length data)]
        [error : (_list io _int 1)]
        -> _Tox-pointer)
  #:c-id tox_new)

#|
 # Run this before closing shop.
 # Free all datastructures.
 # void tox_kill(Tox *tox);
 |#
(define-tox tox-kill! (_fun [tox : _Tox-pointer] -> _void)
  #:c-id tox_kill)

#|
# calculates the number of bytes required to store the tox instance with
# tox_get_savedata. this function cannot fail. the result is always greater
# than 0.
#
# @see threading for concurrency implications.
#
# size_t tox_get_savedata_size(const Tox *tox);
|#
(define-tox get-savedata-size (_fun [tox : _Tox-pointer] -> _size)
  #:c-id tox_get_savedata_size)


#|
# Store all information associated with the tox instance to a byte array.
#
# @param data A memory region large enough to store the tox instance data.
# Call tox_get_savedata_size to find the number of bytes required. If this parameter
# is NULL, this function has no effect.
#
# void tox_get_savedata(const Tox *tox, uint8_t *data);
|#
(define-tox get-savedata (_fun [tox : _Tox-pointer] [data : _bytes] -> _void)
  #:c-id tox_get_savedata)

#|
# Sends a "get nodes" request to the given bootstrap node with IP, port, and
# public key to setup connections.
#
# This function will attempt to connect to the node using UDP and TCP at the
# same time.
#
# Tox will use the node as a TCP relay in case Tox_Options.udp_enabled was
# false, and also to connect to friends that are in TCP-only mode. Tox will
# also use the TCP connection when NAT hole punching is slow, and later switch
# to UDP if hole punching succeeds.
#
# @param host The hostname or IP address (IPv4 or IPv6) of the node.
# @param port The port on the host on which the bootstrap Tox instance is
# listening.
# @param public_key The long term public key of the bootstrap node
# (TOX_PUBLIC_KEY_SIZE bytes).
# @return true on success.
#
# bool tox_bootstrap(Tox *tox, const char *host, uint16_t port,
#                    const uint8_t *public_key, TOX_ERR_BOOTSTRAP *error);
|#
(define-tox tox-bootstrap
  (_fun [tox : _Tox-pointer]
        [host : _string]
        [port : _uint16]
        [public-key : _bytes]
        [err : (_list io _int 1)] -> _bool)
  #:c-id tox_bootstrap)

#|
# Adds additional host:port pair as TCP relay.
#
# This function can be used to initiate TCP connections to different ports on
# the same bootstrap node, or to add TCP relays without using them as
# bootstrap nodes.
#
# @param host The hostname or IP address (IPv4 or IPv6) of the TCP relay.
# @param port The port on the host on which the TCP relay is listening.
# @param public_key The long term public key of the TCP relay
# (TOX_PUBLIC_KEY_SIZE bytes).
# @return true on success.
#
# bool tox_add_tcp_relay(Tox *tox, const char *host, uint16_t port,
#                        const uint8_t *public_key, TOX_ERR_BOOTSTRAP *error);
|#
(define-tox tox-add-tcp-relay
  (_fun [tox : _Tox-pointer]
        [host : _string]
        [port : _uint16]
        [public-key : _bytes]
        [err : (_list io _int 1)] -> _bool)
  #:c-id tox_add_tcp_relay)

; Return whether we are connected to the DHT. The return value is equal to the
; last value received through the `self_connection_status` callback.
(define-tox get-self-connection-status (_fun [tox : _Tox-pointer] -> _int)
  #:c-id tox_self_get_connection_status)

#|
# The function type for the `self_connection_status` callback.
#
# @param connection_status Equal to the return value of
# tox_self_get_connection_status.
#
# typedef void tox_self_connection_status_cb(Tox *tox, TOX_CONNECTION connection_status,
#                                            void *user_data);
|#
(define get-self-connection-status-cb
  (_fun [tox : _Tox-pointer]
        [connection-status : (_list io _int 1)]
        [user-data : _gcpointer] -> _void))

#|
# Set the callback for the `self_connection_status` event. Pass NULL to unset.
#
# This event is triggered whenever there is a change in the DHT connection
# state. When disconnected, a client may choose to call tox_bootstrap again, to
# reconnect to the DHT. Note that this state may frequently change for short
# amounts of time. Clients should therefore not immediately bootstrap on
# receiving a disconnect.
#
# TODO: how long should a client wait before bootstrapping again?
#
# void tox_callback_self_connection_status(Tox *tox, tox_self_connection_status_cb *function,
#                                          void *user_data);
|#
(define-tox callback-self-connection-status
  (_fun [tox : _Tox-pointer]
        [callback : get-self-connection-status-cb]
        [userdata : _gcpointer] -> _void)
  #:c-id tox_callback_self_connection_status)

#|
# Return the time in milliseconds before tox_iteration() should be called again
# for optimal performance.
#
# uint32_t tox_iteration_interval(const Tox *tox);
|#
(define-tox tox-iteration-interval (_fun [tox : _Tox-pointer] -> _uint32)
  #:c-id tox_iteration_interval)

#|
# The main loop that needs to be run in intervals of tox_iteration_interval()
# milliseconds.
#
# void tox_iterate(Tox *tox);
|#
(define-tox tox-iterate (_fun [tox : _Tox-pointer] -> _void)
  #:c-id tox_iterate)

#|
# Writes the Tox friend address of the client to a byte array. The address is
# not in human-readable format. If a client wants to display the address,
# formatting is required.
#
# @param address A memory region of at least TOX_ADDRESS_SIZE bytes. If this
# parameter is NULL, this function has no effect.
# @see TOX_ADDRESS_SIZE for the address format.
#
# void tox_get_address(Tox *tox, uint8_t *address);
|#
(define-tox get-self-address
  (_fun [tox : _Tox-pointer]
        [address : (_bytes o TOX_ADDRESS_SIZE)]
        -> _void
        -> address)
  #:c-id tox_self_get_address)

#|
# Set the 4-byte nospam part of the address.
#
# @param nospam Any 32 bit unsigned integer.
#
# void tox_self_set_nospam(Tox *tox, uint32_t nospam);
|#
(define-tox set-self-nospam (_fun [tox : _Tox-pointer] [nospam : _uint32] -> _void)
  #:c-id tox_self_set_nospam)

#|
# Get the 4-byte nospam part of the address.
#
# uint32_t tox_self_get_nospam(const Tox *tox);
|#
(define-tox get-self-nospam (_fun [tox : _Tox-pointer] -> _uint32)
  #:c-id tox_self_get_nospam)

#|
# Copy the Tox Public Key (long term public key) from the Tox object.
#
# @param public_key A memory region of at least TOX_PUBLIC_KEY_SIZE bytes. If
# this parameter is NULL, this function has no effect.
#
# void tox_self_get_public_key(const Tox *tox, uint8_t *public_key);
|#
(define-tox get-self-public-key
  (_fun [tox : _Tox-pointer]
        [public-key : (_bytes o TOX_PUBLIC_KEY_SIZE)]
        -> _void
        -> public-key)
  #:c-id tox_self_get_public_key)

#|
# Copy the secret key from the Tox object.
#
# @param secret_key A memory region of at least TOX_SECRET_KEY_SIZE bytes. If
# this parameter is NULL, this function has no effect.
#
# void tox_self_get_secret_key(const Tox *tox, uint8_t *secret_key);
|#
(define-tox get-self-secret-key
  (_fun [tox : _Tox-pointer]
        [secret-key : (_bytes o TOX_SECRET_KEY_SIZE)] -> _void)
  #:c-id tox_self_get_secret_key)

#|
# Set the nickname for the Tox client.
#
# Nickname length cannot exceed TOX_MAX_NAME_LENGTH. If length is 0, the name
# parameter is ignored (it can be NULL), and the nickname is set back to empty.
#
# @param name A byte array containing the new nickname.
# @param length The size of the name byte array.
#
# @return true on success.
#
# bool tox_self_set_name(Tox *tox, const uint8_t *name, size_t length, TOX_ERR_SET_INFO *error);
|#
(define-tox set-self-name
  (_fun (tox name err) ::
        [tox : _Tox-pointer]
        [name : _bytes]
        [len : _int = (bytes-length name)]
        [err : (_list io _int 1)] -> _bool)
  #:c-id tox_self_set_name)

#|
# Return the length of the current nickname as passed to tox_self_set_name.
#
# If no nickname was set before calling this function, the name is empty,
# and this function returns 0.
#
# @see threading for concurrency implications.
#
size_t tox_self_get_name_size(const Tox *tox);
|#
(define-tox get-self-name-size (_fun [tox : _Tox-pointer] -> _size)
  #:c-id tox_self_get_name_size)

#|
# Write the nickname set by tox_self_set_name to a byte array.
#
# If no nickname was set before calling this function, the name is empty,
# and this function has no effect.
#
# Call tox_self_get_name_size to find out how much memory to allocate for
# the result.
#
# @param name A valid memory location large enough to hold the nickname.
#   If this parameter is NULL, the function has no effect.
#
# void tox_self_get_name(const Tox *tox, uint8_t *name);
|#
(define-tox get-self-name
  (_fun [tox : _Tox-pointer]
        [name : (_bytes o TOX_MAX_NAME_LENGTH)]
        -> _void
        -> name)
  #:c-id tox_self_get_name)

#|
# Set the client's status message.
#
# Status message length cannot exceed TOX_MAX_STATUS_MESSAGE_LENGTH. If
# length is 0, the status parameter is ignored (it can be NULL), and the
# user status is set back to empty.
#
# bool tox_self_set_status_message(Tox *tox, const uint8_t *status, size_t length,
#                                  TOX_ERR_SET_INFO *error);
|#
(define-tox set-self-status-message
  (_fun [tox : _Tox-pointer]
        [status : _bytes]
        [len : _int = (bytes-length status)]
        [err : (_list io _int 1)] -> _bool)
  #:c-id tox_self_set_status_message)

#|
# Return the length of the current status message as passed to
# tox_self_set_status_message.
#
# If no status message was set before calling this function, the status
# is empty, and this function returns 0.
#
# @see threading for concurrency implications.
#
# size_t tox_self_get_status_message_size(const Tox *tox);
|#
(define-tox get-self-status-message-size
  (_fun [tox : _Tox-pointer] -> _size)
  #:c-id tox_self_get_status_message_size)

#|
# Write the status message set by tox_self_set_status_message to a byte array.
#
# If no status message was set before calling this function, the status is
# empty, and this function has no effect.
#
# Call tox_self_status_message_size to find out how much memory to allocate for
# the result.
#
# @param status A valid memory location large enough to hold the status message.
#   If this parameter is NULL, the function has no effect.
#
# void tox_self_get_status_message(const Tox *tox, uint8_t *status);
|#
(define-tox get-self-status-message
  (_fun [tox : _Tox-pointer]
        [status : (_bytes o TOX_MAX_STATUS_MESSAGE_LENGTH)]
        -> _void)
  #:c-id tox_self_get_status_message)

#|
# Set the client's user status.
#
# @param user_status One of the user statuses listed in the enumeration above.
#
# void tox_self_set_status(Tox *tox, TOX_USER_STATUS user_status);
|#
(define-tox set-self-status
  (_fun [tox : _Tox-pointer]
        [user-status : _int] -> _void)
  #:c-id tox_self_set_status)

#|
# Returns the client's user status.
#
# TOX_USER_STATUS tox_self_get_status(const Tox *tox);
|#
(define-tox get-self-status (_fun [tox : _Tox-pointer] -> _int)
  #:c-id tox_self_get_status)
)
